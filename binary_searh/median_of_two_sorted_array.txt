Given two sorted arrays nums1 and nums2 of size m and n respectively, return the median of the two sorted arrays.

The overall run time complexity should be O(log (m+n)).



Input: nums1 = [1,3], nums2 = [2]
Output: 2.00000
Explanation: merged array = [1,2,3] and median is 2.


Input: nums1 = [1,2], nums2 = [3,4]
Output: 2.50000
Explanation: merged array = [1,2,3,4] and median is (2 + 3) / 2 = 2.5.


class Solution {
public:
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
        int n1=nums1.size();
        int n2=nums2.size();
        if(n1>n2)
        {
            return(findMedianSortedArrays(nums2,nums1));
        }
        int l=0;
        int h=n1,x1,x2,y1,y2;
        while(l<=h)
        {
            int c1=(l+h)/2;   //cut for first array.
            int c2=((n1+n2+1)/2)-c1; //cut for second array.
            
            if(c1==0)
            {
                x1=INT_MIN;
            }
            else
            {
                x1=nums1[c1-1];
            }
            if(c2==0)
            {
                x2=INT_MIN;
            }
            else
            {
                x2=nums2[c2-1];
            }
            if(c1==n1)
            {
                y1=INT_MAX;
            }
            else
            {
                y1=nums1[c1];
            }
            if(c2==n2)
            {
                y2=INT_MAX;
            }
            else
            {
                y2=nums2[c2];
            }
            if(x1<=y2&&x2<=y1)
            {
                if((n1+n2)%2==1)
                    return(max(x1,x2));
                else
                {
                    return((max(x1,x2)+min(y1,y2))/2.0);
                }
            }
            if(x1>y2)
                h=c1-1;
            else
                l=c1+1;
        }
        return(0.0);
    }
};