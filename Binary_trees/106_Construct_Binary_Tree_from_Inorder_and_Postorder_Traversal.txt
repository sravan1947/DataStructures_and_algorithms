
106. Construct Binary Tree from Inorder and Postorder Traversal

Share
Given two integer arrays inorder and postorder where inorder is the inorder traversal
 of a binary tree and postorder is the postorder traversal of the same tree, construct and return the binary tree.

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
     int k;
    TreeNode* construct(int i,int j,unordered_map<int,int> &mp,vector<int> &post)
    {
        if(i>j)
            return NULL;
        int f=mp[post[k]];
        TreeNode *root=new TreeNode(post[k]);
        k--;
        root->right=construct(f+1,j,mp,post);
        root->left=construct(i,f-1,mp,post);
        return(root);
            
    }
    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {
         unordered_map<int,int> mp;
        int n=inorder.size();
        for(int i=0;i<n;i++)
        {
            mp[inorder[i]]=i;
        }
        k=n-1;
        return(construct(0,n-1,mp,postorder));
        
    }
};