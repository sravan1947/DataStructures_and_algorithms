Given a binary tree root, a node X in the tree is named good if in the path from root to X there are no nodes with a value greater than X.

Return the number of good nodes in the binary tree.

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */

 Input: root = [3,1,4,3,null,1,5]
Output: 4
Explanation: Nodes in blue are good.
Root Node (3) is always a good node.
Node 4 -> (3,4) is the maximum value in the path starting from the root.
Node 5 -> (3,4,5) is the maximum value in the path
Node 3 -> (3,1,3) is the maximum value in the path.

class Solution {
public:
    int ans=0;
    void preorder(TreeNode *root,int max_v)
    {
        if(root!=NULL)
        {
            
            if(root->val>=max_v)
            {
                ans++;
                max_v=root->val;
            }
                
            preorder(root->left,max_v);
            preorder(root->right,max_v);
        }
    }
    int goodNodes(TreeNode* root) {
        if(root==NULL)
            return(0);
        
        preorder(root,root->val);
        return(ans);
    }
};