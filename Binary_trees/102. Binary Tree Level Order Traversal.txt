
Given the root of a binary tree, return the level order traversal of its nodes'
 values. (i.e., from left to right, level by level).




/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> levelOrder(TreeNode* root) {
        queue<TreeNode*> q;
        vector<vector<int> > ans;
        if(root!=NULL)
        q.push(root);
        while(!q.empty())
        {
            int n=q.size();
            vector<int> v;
            for(int i=0;i<n;i++)
            {
                if(q.front()->left!=NULL)
                {
                    q.push(q.front()->left);
                }
                if(q.front()->right!=NULL)
                {
                    q.push(q.front()->right);
                }
                v.push_back(q.front()->val);
                q.pop();
            }
            ans.push_back(v);
        }
        return(ans);
        
    }
};

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> levelOrder(TreeNode* root) {
        queue<TreeNode*> q;
        vector<vector<int> > ans;
        if(root!=NULL)
        {
            q.push(root);
           q.push(NULL);
        }
        vector<int> v;
        while(!q.empty())
        {
            if(q.front()!=NULL)
            {
                if(q.front()->left!=NULL)
                {
                    q.push(q.front()->left);
                }
                if(q.front()->right!=NULL)
                {
                    q.push(q.front()->right);
                }
               v.push_back(q.front()->val);
            }
            else
            {
                ans.push_back(v);
                v.resize(0);
                if(q.size()>1)
                  q.push(NULL);
            }
           // cout<<q.front()<<endl;
                q.pop();
            
        }
        return(ans);
        
    }
};


/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> ans;
    void dfs(TreeNode* root,int level)
    {
        if(root!=NULL)
        {
            if(ans.size()==level)
            {
                ans.push_back(vector<int>());
            }
            
                ans[level].push_back(root->val);
                dfs(root->left,level+1);
                dfs(root->right,level+1);
            
        }
    }
    vector<vector<int>> levelOrder(TreeNode* root) {
        dfs(root,0);
        return(ans);
        
    }
};