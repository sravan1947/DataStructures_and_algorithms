105. Construct Binary Tree from Preorder and Inorder Traversal

Given two integer arrays preorder and inorder where preorder is the preorder traversal of a binary tree and 
inorder is the inorder traversal of the same tree, construct and return the binary tree.

Input: preorder = [3,9,20,15,7], inorder = [9,3,15,20,7]
Output: [3,9,20,null,null,15,7]

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int k=0;
    TreeNode* construct(int i,int j,unordered_map<int,int> &mp,vector<int> &pre)
    {
        if(i>j)
            return NULL;
        int f=mp[pre[k]];
        TreeNode *root=new TreeNode(pre[k]);
        k++;
        root->left=construct(i,f-1,mp,pre);
        root->right=construct(f+1,j,mp,pre);
        return(root);
            
    }
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        unordered_map<int,int> mp;
        int n=inorder.size();
        for(int i=0;i<n;i++)
        {
            mp[inorder[i]]=i;
        }
        return(construct(0,n-1,mp,preorder));
    }
};


______________________________________________________________________________________________________________


/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode *root=NULL;
    int k=0;
    void construct(int i,int j,bool lef,bool righ,unordered_map<int,int> &mp,TreeNode *temp,vector<int> &pre)
    {
        if(i>j)
            return;
        int f;
        if(root==NULL)
        {
            root=new TreeNode(pre[k]);
            f=mp[pre[k]];
            temp=root;
        }
        else
        {  
            if(lef)
            {   
                k++;
                f=mp[pre[k]];
                temp->left=new TreeNode(pre[k]);
                temp=temp->left;
            }
            if(righ)
            {
                k++;
                f=mp[pre[k]];
                temp->right=new TreeNode(pre[k]);
                temp=temp->right;  
            }
        }
        construct(i,f-1,true,false,mp,temp,pre);
        construct(f+1,j,false,true,mp,temp,pre);
            
    }
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        unordered_map<int,int> mp;
        int n=inorder.size();
        for(int i=0;i<n;i++)
        {
            mp[inorder[i]]=i;
        }
        construct(0,n-1,false,false,mp,NULL,preorder);
        return(root);
    }
};

 