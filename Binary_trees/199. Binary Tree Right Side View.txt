
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    unordered_map<int,int> mp;
    vector<int> ans;
    void re_preorder(TreeNode *root,int i)
    {
        if(root!=NULL)
        {
            if(!mp.count(i))
            {
                mp[i]=root->val;
                ans.push_back(root->val);
            }
            re_preorder(root->right,i+1);
            re_preorder(root->left,i+1);
        }
    }
    vector<int> rightSideView(TreeNode* root) {
        re_preorder(root,0);
        return(ans);
    }
};



/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<int> ans;
    void re_preorder(TreeNode *root,int i)
    {
        if(root!=NULL)
        {
            if(ans.size()<i+1)
            {
                ans.push_back(root->val);
            }
            re_preorder(root->right,i+1);
            re_preorder(root->left,i+1);
        }
    }
    vector<int> rightSideView(TreeNode* root) {
        re_preorder(root,0);
        return(ans);
    }
};


/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<int> ans;
    int max_level=0;
    void re_preorder(TreeNode *root,int i)
    {
        if(root!=NULL)
        {
            if(max_level<i+1)
            {
                max_level++;
                ans.push_back(root->val);
            }
            re_preorder(root->right,i+1);
            re_preorder(root->left,i+1);
        }
    }
    vector<int> rightSideView(TreeNode* root) {
        re_preorder(root,0);
        return(ans);
    }
};