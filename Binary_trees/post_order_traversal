/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<int> postorderTraversal(TreeNode* root) {
          stack<TreeNode*> st;
        vector<int> ans;
        TreeNode *curr=root;
        while(curr!=NULL|| !st.empty())
        {
            while(curr!=NULL)
            {
                ans.push_back(curr->val);
                if(curr->left!=NULL)
                {
                    st.push(curr->left);
                }
                curr=curr->right;
            }
            if(!st.empty())
            {
                curr=st.top();
                st.pop();
            }
            
        }
        reverse(ans.begin(),ans.end());
        return(ans);
        
        
    }
};


https://www.geeksforgeeks.org/iterative-postorder-traversal-using-stack/


/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<int> postorderTraversal(TreeNode* root) {
          vector<int> postOrderList;
    // Check for empty tree
        if (root == NULL)
            return postOrderList;
        stack<TreeNode *> S;
        S.push(root);
        TreeNode* prev = NULL;
        while (!S.empty()) {
            auto current = S.top();
            if(prev==NULL||prev->left==current||prev->right==current)
            {
                if (current->left)
                    S.push(current->left);
                else if (current->right)
                    S.push(current->right);
                else {
                    S.pop();
                    postOrderList.push_back(current->val);
                }
            }
            else
                if(current->left==prev)
                {
                  if(current->right)
                  {
                      S.push(current->right);
                  }
                  else
                  {
                     S.pop();
                    postOrderList.push_back(current->val);
                  }
                }
            else
            {
                S.pop();
                postOrderList.push_back(current->val);
            }
            prev=current;
        }
 
        return (postOrderList);

    }
};