/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */

103. Binary Tree Zigzag Level Order Traversal

 Given the root of a binary tree, return the zigzag level order traversal of its nodes' values. (i.e., from left to right, 
 then right to left for the next level and alternate between).

 
class Solution {
public:
 
    vector<vector<int>> zigzagLevelOrder(TreeNode* root) {        
         vector<vector<int>> v;
        stack<TreeNode*> st1,st2;
        if(root!=NULL)
        st1.push(root);
        int level=0;
        int c=0;
        while(!st1.empty()||!st2.empty())
        {
            level++;
            while(!st1.empty())
            {
                if(st1.top()->left!=NULL)
                {
                    st2.push(st1.top()->left);
                }
                
                    if(st1.top()->right!=NULL)
                    {
                        st2.push(st1.top()->right);
                    }
                if(level>v.size())
                {
                    v.push_back(vector<int>());
                }
                v[level-1].push_back(st1.top()->val);
                 st1.pop();   
            }
            level++;
            while(!st2.empty())
            {
                if(st2.top()->right!=NULL)
                    {
                        st1.push(st2.top()->right);
                    } 
                
                    if(st2.top()->left!=NULL)
                {
                    st1.push(st2.top()->left);
                }
                if(level>v.size())
                {
                    v.push_back(vector<int>());
                }
                    v[level-1].push_back(st2.top()->val);
                    st2.pop();
            }
        }
        return(v);
    }
};

____________________________________________________________________________________________________

method 2 with recursion

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> ans;
    void dfs(TreeNode* root,int level)
    {
        if(root!=NULL)
        {
            if(ans.size()==level)
            {
                ans.push_back(vector<int>());
            }
            
                ans[level].push_back(root->val);
                dfs(root->left,level+1);
                dfs(root->right,level+1);
            
        }
    }
    vector<vector<int>> zigzagLevelOrder(TreeNode* root) {        
        dfs(root,0);
        int n=ans.size();
        for(int i=0;i<n;i++)
        {
            if(i%2==1)
            {
                reverse(ans[i].begin(),ans[i].end());
            }
        }
        return(ans);
    }
};