5. Longest Palindromic Substring

Given a string s, return the longest palindromic substring in s.

Input: s = "babad"
Output: "bab"
Explanation: "aba" is also a valid answer.


bottom up:


class Solution {
public:
    int mem[1001][1001];
    string substring(string s,int i,int j)
    {
        string st="";
        for(int k=i;k<=j;k++)
        {
            st+=s[k];
        }
        return(st);
    }
    string longestPalindrome(string s) {
        int n=s.length();
        int l=0,r=0,max=0;
        for(int i=n-1;i>=0;i--)
        {
            for(int j=i;j<n;j++)
            {
                if(s[i]==s[j])
                {
                    if(i==j||j-i<=2)
                        mem[i][j]=1;
                    else
                    {
                        mem[i][j]=mem[i+1][j-1];
                    }
                    if(mem[i][j]&&max<j-i+1)
                    {
                        max=j-i+1;
                        l=i;
                        r=j;
                    }
                }
                
            }
        }
        return(substring(s,l,r));
    }
};


Top down: 

class Solution {
public:
    int mem[1001][1001];
    string substring(string s,int i,int j)
    {
        string st="";
        for(int k=i;k<=j;k++)
        {
            st+=s[k];
        }
        return(st);
    }
    string longestPalindrome(string s) {
        memset(mem,-1,sizeof(mem));
        int n=s.length();
        int l=0,r=0,max=0;
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<n;j++)
            {
                if(s[i]==s[j]&&check(i,j,s)&&max<j-i+1)
                {
                    max=j-i+1;
                    l=i;
                    r=j;
                }
            }
        }
        
        return(substring(s,l,r));
    }
    int check(int i,int j,string s)
    {
        if(i>=j)
            return(1);
        
          if(mem[i][j]!=-1)
          {
            return(mem[i][j]); 
          }
        if(s[i]==s[j])
        {
            mem[i][j]=check(i+1,j-1,s);
            return(mem[i][j]);
        }
        else 
        {
            mem[i][j]=0;
            return(mem[i][j]);
        }
    }
};