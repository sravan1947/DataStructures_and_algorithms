Given a string array words, return an array of all characters that show up in all strings within the words (including duplicates). You may return the answer in any order.

Input: words = ["bella","label","roller"]
Output: ["e","l","l"]


class Solution {
public:
    int check(string &str,char c)
    {
        int n=str.length();
        for(int i=0;i<n;i++)
        {
            if(str[i]==c)
            {
                 str.erase(str.begin() + i);
                return(1);
            }
        }
        return(0);
    }
    vector<string> commonChars(vector<string>& words) {
        string s=words[0];
        int k=words[0].length();
        int n=words.size();
        vector<string> v;
        for(int i=0;i<k;i++)
        {
           int j;
           for(j=0;j<n;j++)
           {
               if(!check(words[j],s[i]))
               {
                   break;
               }
               
           }
           if(j==n)
           {
               string str="";
               str+=s[i];
               v.push_back(str);
           }
        }
        return(v);
    }
};


approach 2:
For each string, we count characters in cnt1. Then, we track the minimum count for each character in cnt.


vector<string> commonChars(vector<string>& A) {
  vector<int> cnt(26, INT_MAX);
  vector<string> res;
  for (auto s : A) {
    vector<int> cnt1(26, 0);
    for (auto c : s) ++cnt1[c - 'a'];
    for (auto i = 0; i < 26; ++i) cnt[i] = min(cnt[i], cnt1[i]);
  }
  for (auto i = 0; i < 26; ++i)
    for (auto j = 0; j < cnt[i]; ++j) res.push_back(string(1, i + 'a'));
  return res;
}

Runtime: O(n), where n is the total number of characters.
Memory: O(1) (we use two fixed-size vectors).