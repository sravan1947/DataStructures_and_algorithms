435. Non-overlapping Intervals
Given an array of intervals intervals where intervals[i] = [starti, endi],
 return the minimum number of intervals you need to remove to make the rest of the intervals non-overlapping.

Input: intervals = [[1,2],[2,3],[3,4],[1,3]]
Output: 1
Explanation: [1,3] can be removed and the rest of the intervals are non-overlapping.


 class Solution {
public:
    static bool sortbysec(const pair<int,int> &i,const pair<int,int> &j)
    {
        return(i.second<j.second);
    }
    int eraseOverlapIntervals(vector<vector<int>>& v) {
        vector<pair<int,int>> in;
        int n=v.size();
        if(n==0)
            return(0);
        for(int i=0;i<n;i++)
            in.push_back({v[i][0],v[i][1]});
        sort(in.begin(),in.end(),sortbysec);
         n=in.size();
        int r=in[0].second,c=0;
        for(int i=0;i<n-1;i++)
        {
            if(r>in[i+1].first)
            {
                c++;
            }
            else
            {
                r=in[i+1].second;
            }
            
        }
        return(c);
    }
};