You are given an array prices where prices[i] is the price of a given stock on the ith day.

You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock.

Return the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0.


Input: prices = [7,1,5,3,6,4]
Output: 5
Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.
Note that buying on day 2 and selling on day 1 is not allowed because you must buy before you sell.


class Solution {
public:
    int maxProfit(vector<int>& prices) {
       int n = prices.size();
       int max_ele[n];
        max_ele[n-1]=prices[n-1];
       for(int i=n-2;i>=0;i--)
       {
           max_ele[i]=max(max_ele[i+1],prices[i]);
       }
      int ans=0;
        for(int i=0;i<n;i++)
        {
            ans=max(max_ele[i]-prices[i],ans);
        }
        return(ans);
    }
};


class Solution {
public:
    int maxProfit(vector<int>& prices) {
       int n = prices.size();
       int ans=0,min_ans=INT_MAX;
        for(int i=0;i<n;i++)
        {
            min_ans=min(min_ans,prices[i]);
            ans=max(prices[i]-min_ans,ans);
        }
        return(ans);
    }
};