You are given two positive 0-indexed integer arrays nums1 and nums2, both of length n.

The sum of squared difference of arrays nums1 and nums2 is defined as the sum of (nums1[i] - nums2[i])2 for each 0 <= i < n.

You are also given two positive integers k1 and k2. You can modify any of the elements of nums1 by +1 or -1 at most k1 times. Similarly, you can modify any of the elements of nums2 by +1 or -1 at most k2 times.

Return the minimum sum of squared difference after modifying array nums1 at most k1 times and modifying array nums2 at most k2 times.

Note: You are allowed to modify the array elements to become negative integers.


class Solution {
public:
    long long minSumSquareDiff(vector<int>& num1, vector<int>& num2, int k1, int k2) {
        int n=num1.size();
        long long ans=0;
        long long k=k1+k2;
        for(int i=0;i<n;i++)
        {
            num1[i]=abs(num1[i]-num2[i]);
        }
        int si=*max_element(num1.begin(),num1.end());
        long long dp[si+1];
        memset(dp,0,sizeof(dp));
        for(int i=0;i<n;i++)
        {
            dp[num1[i]]++;
        }
        for(int i=si;i>0;i--)
        {
            if(dp[i]>0)
            {
                int ele = min(k,dp[i]);
                dp[i]=dp[i]-ele;
                dp[i-1]=dp[i-1]+ele;
                k=k-ele;
            }
        }
        for(long long  i=1;i<=si;i++)
        {
            ans=ans+((i*i)*dp[i]);
        }
        return(ans);
        
    }
};