Given an array of intervals where intervals[i] = [starti, endi],merge all overlapping intervals, 
and return an array of the non-overlapping intervals that cover all the intervals in the input.

Input: intervals = [[1,3],[2,6],[8,10],[15,18]]
Output: [[1,6],[8,10],[15,18]]
Explanation: Since intervals [1,3] and [2,6] overlaps, merge them into [1,6].

class Solution {
public:
   
    vector<vector<int>> merge(vector<vector<int>>& intervals) {
        int f=0,e=1;
        int n=intervals.size();
        vector<vector<int>> v;
        sort(intervals.begin(),intervals.end());
         int end=intervals[0][e],j=0;
        for(int i=0;i<n;i++)
        {
            if(i<n-1&&end>=intervals[i+1][f])
            {
                end=max(end,intervals[i+1][e]);
            }
            else
            {
                vector<int> t;
                t.push_back(intervals[j][f]);
                t.push_back(end);
                if(i<n-1)
                    end=intervals[i+1][e];
                j=i+1;
                v.push_back(t);
            }
        }
        return(v);
        
    }