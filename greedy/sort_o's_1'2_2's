
//approach one : 

class Solution {
public:
    void sortColors(vector<int>& nums) {
        int zeroes=0,ones=0,twos=0;
        int n=nums.size();
        for(int i=0;i<n;i++)
        {
            if(nums[i]==0)
                zeroes++;
            else
                if(nums[i]==1)
                    ones++;
            else
                if(nums[i]==2)
                    twos++;
        }
        //cout<<zeroes<<" "<<ones<<" "<<twos<<" "<<"\n";
        int i=0;
        while(zeroes!=0)
        {
            if(nums[i]!=0)
                nums[i]=0;
            zeroes--;
            i++;
        }
        while(ones!=0)
        {
            if(nums[i]!=1)
                nums[i]=1;
            ones--;
            i++;
        }
        while(twos!=0)
        {
            if(nums[i]!=2)
                nums[i]=2;
            twos--;
            i++;
        }
        
    }
};

//approach 2:
//by keeping three pointers as low,mid and high.
// mid does all the work 
// while condition when going via a loop.
class Solution {
public:
    void sortColors(vector<int>& nums) {
        int n=nums.size();
        int low=0;
        int high=n-1;
        int mid=0;
        while(mid<=high)
        {
            if(nums[mid]==0)
            {
                swap(nums[low],nums[mid]);
                low++;
                mid++;
            }
            else
                if(nums[mid]==1)
                {
                    mid++;
                }
            else
                if(nums[mid]==2)
                {
                    swap(nums[mid],nums[high]);
                    high--;
                }
        }

    }
};