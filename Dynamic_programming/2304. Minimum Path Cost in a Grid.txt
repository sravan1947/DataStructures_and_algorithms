Minimum Path Cost in a Grid

Share
You are given a 0-indexed m x n integer matrix grid consisting of distinct integers from 0 to m * n - 1. 
You can move in this matrix from a cell to any other cell in the next row. That is, if you are in cell (x, y) 
such that x < m - 1, you can move to any of the cells (x + 1, 0), (x + 1, 1), ..., (x + 1, n - 1). Note that it is 
not possible to move from cells in the last row.

Each possible move has a cost given by a 0-indexed 2D array moveCost of size (m * n) x n, where moveCost[i][j] is 
the cost of moving from a cell with value i to a cell in column j of the next row. The cost of moving from cells in the 
last row of grid can be ignored.

The cost of a path in grid is the sum of all values of cells visited plus the sum of costs of all the moves made. 
Return the minimum cost of a path that starts from any cell in the first row and ends at any cell in the last row.

class Solution {
public:
    int f_ans;
    int c=0;
    int dp[100][100];
    int recur(int i,int j,int n,int m,vector<vector<int>>& grid, vector<vector<int>>& mvc)
    {
            if(i==n-1)
            {
                return(grid[i][j]);
            }
        if(dp[i][j]!=-1)
            return(dp[i][j]);
        
           int r=INT_MAX;
            for(int k=0;k<m;k++)
            {
                r=min(r,grid[i][j]+mvc[grid[i][j]][k]+recur(i+1,k,n,m,grid,mvc));
            }
        return(dp[i][j]=r);
    }
    int minPathCost(vector<vector<int>>& grid, vector<vector<int>>& mvc) {
        f_ans=INT_MAX;
        int ans=0;
        int m=grid[0].size();
        memset(dp,-1,sizeof(dp));
        for(int i=0;i<m;i++)
        {
            f_ans=min(f_ans,recur(0,i,grid.size(),grid[0].size(),grid,mvc));
        }
        return(f_ans);
        
    }
};


with out recursion:

class Solution {
public:
    int f_ans;
    int c=0;
    int minPathCost(vector<vector<int>>& grid, vector<vector<int>>& c) {
        int n=grid.size();
        int m=grid[0].size();
        vector<vector<int>> dp(n,vector<int>(m,INT_MAX));
        dp[0]=grid[0];
        for(int i=1;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
                for(int k=0;k<m;k++)
                { 
                    dp[i][k]=min(dp[i][k],grid[i][k]+dp[i-1][j]+c[grid[i-1][j]][k]);
                }
            }
                
        }
        return(*min_element(dp[n-1].begin(),dp[n-1].end()));
        
    }
};