//{ Driver Code Starts
// Initial Template for C++

#include <bits/stdc++.h>
using namespace std;

// } Driver Code Ends
// User function Template for C++

class Solution{
public:
    int dp[1000][1000];
    int recur(int arr[],int i,int j)
    {
        if(i==j)
            return(0);
        int mi=INT_MAX;
        int ans;
        int k;
        if(dp[i][j]!=-1)
            return(dp[i][j]);
        for( k=i;k<j;k++)
        {
            ans=recur(arr,i,k)+recur(arr,k+1,j)+arr[i-1]*arr[k]*arr[j];
            
            if(mi>ans)
                mi=ans;
        }
        
        return(dp[i][j]=mi);
    }
    int matrixMultiplication(int n, int arr[])
    {
        for(int i=0;i<=n;i++)
        {
            for(int j=0;j<=n;j++)
            {
                dp[i][j]=-1;
            }
        }
        // code here
        return(recur(arr,1,n-1));
    }
};

//{ Driver Code Starts.

int main(){
    int t;
    cin>>t;
    while(t--){
        int N;
        cin>>N;
        int arr[N];
        for(int i = 0;i < N;i++)
            cin>>arr[i];
        
        Solution ob;
        cout<<ob.matrixMultiplication(N, arr)<<endl;
    }
    return 0;
}
// } Driver Code Ends




________________________________________________________________________________________________________________________________
//{ Driver Code Starts
// Initial Template for C++

#include <bits/stdc++.h>
using namespace std;

// } Driver Code Ends
// User function Template for C++

class Solution{
public:
    int recur(int arr[],int i,int j)
    {
        if(i==j)
            return(0);
        int mi=INT_MAX;
        int ans;
        int k;
        for( k=i;k<j;k++)
        {
            ans=recur(arr,i,k)+recur(arr,k+1,j)+arr[i-1]*arr[k]*arr[j];
            
            if(mi>ans)
                mi=ans;
        }
        
        return(mi);
    }
    int matrixMultiplication(int n, int arr[])
    {
        // code here
        return(recur(arr,1,n-1));
    }
};

//{ Driver Code Starts.

int main(){
    int t;
    cin>>t;
    while(t--){
        int N;
        cin>>N;
        int arr[N];
        for(int i = 0;i < N;i++)
            cin>>arr[i];
        
        Solution ob;
        cout<<ob.matrixMultiplication(N, arr)<<endl;
    }
    return 0;
}
// } Driver Code Ends