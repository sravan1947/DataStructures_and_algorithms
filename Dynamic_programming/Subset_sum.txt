Given an array of non-negative integers, and a value sum, determine if there is a subset of the given set with sum equal to given sum. 


//{ Driver Code Starts
//Initial template for C++

#include<bits/stdc++.h> 
using namespace std; 

// } Driver Code Ends
//User function template for C++

class Solution{   
public:
    vector<vector<int>> dp;
    int recur(vector<int> &arr,int sum,int i,int n)
    {
       for(int i=0;i<=n;i++)
       {
           for(int j=0;j<=sum;j++)
           {
               if(j==0||i==0)
               {
                   if(j==0)
                     dp[i][j]=1;
               }
               else
               {
                   if(j-arr[i-1]>=0)
                        dp[i][j]=max(dp[i-1][j],dp[i-1][j-arr[i-1]]);
                    else
                    {
                        dp[i][j]=dp[i-1][j];
                    }
               }
              // cout<<dp[i][j]<<" ";
           }
          //cout<<endl;
           
       }
        return(dp[n][sum]);
    }
    bool isSubsetSum(vector<int>arr, int sum){
        int n=arr.size();
        dp.resize(n+1,vector<int>(sum+1,0));
        return(recur(arr,sum,0,n));
    }
};

//{ Driver Code Starts.
int main() 
{ 
    int t;
    cin>>t;
    while(t--)
    {
        int N, sum;
        cin >> N;
        vector<int> arr(N);
        for(int i = 0; i < N; i++){
            cin >> arr[i];
        }
        cin >> sum;
        
        Solution ob;
        cout << ob.isSubsetSum(arr, sum) << endl;
    }
    return 0; 
} 

// } Driver Code Ends

___________________________________________________________________________________________
//{ Driver Code Starts
//Initial template for C++

#include<bits/stdc++.h> 
using namespace std; 

// } Driver Code Ends
//User function template for C++

class Solution{   
public:
    vector<vector<int>> dp;
    int recur(vector<int> &arr,int sum,int i,int n)
    {
        if(sum==0)
            return(1);
        if(i==n||sum<0)
            return(0);

        if(dp[i][sum]!=-1)
            return(dp[i][sum]);
        if(dp[i][sum]=recur(arr,sum-arr[i],i+1,n))
        {
               return(1);
        }
        if(dp[i][sum]=recur(arr,sum,i+1,n))
        {
            return(1);
        }
        return(0);
    }
    bool isSubsetSum(vector<int>arr, int sum){
        int n=arr.size();
        dp.resize(n+1,vector<int>(sum+1,-1));
        return(recur(arr,sum,0,n));
    }
};

//{ Driver Code Starts.
int main() 
{ 
    int t;
    cin>>t;
    while(t--)
    {
        int N, sum;
        cin >> N;
        vector<int> arr(N);
        for(int i = 0; i < N; i++){
            cin >> arr[i];
        }
        cin >> sum;
        
        Solution ob;
        cout << ob.isSubsetSum(arr, sum) << endl;
    }
    return 0; 
} 

// } Driver Code Ends