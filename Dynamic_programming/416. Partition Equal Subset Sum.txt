Given a non-empty array nums containing only positive integers,
 find if the array can be partitioned into two subsets such that the sum of elements in both subsets is equal.

Input: nums = [1,5,11,5]
Output: true
Explanation: The array can be partitioned as [1, 5, 5] and [11].

class Solution {
public:
    int dp[20000];
    int findsubset(int fsum,vector<int> &nums,int n,int i)
    {
        //cout<<fsum<<" "<<i<<" "<<endl;
        if(fsum==0)
            return(1);
        if(i>=n||fsum<0)
            return(0);
       // cout<<i<<" "<<fsum<<endl;
        if(dp[fsum]!=-1)
            return(dp[fsum]);
        if(fsum-nums[i]>=0)
        {
            if(dp[fsum]=findsubset(fsum-nums[i],nums,n,i+1)||findsubset(fsum,nums,n,i+1))
                return(1);
        }
        else
        {
            return(findsubset(fsum,nums,n,i+1));
        }
        return(0);
    }
    bool canPartition(vector<int>& nums) {
        int n=nums.size();
        int nsum=0;
        memset(dp,-1,sizeof(dp));
        for(int i=0;i<n;i++)
        {
            nsum+=nums[i];
        }
        if(nsum%2!=0)
            return(false);
        return(findsubset(nsum/2,nums,n,0));  
    }
};

_______________________________________________________________________________________



class Solution {
public:
    int dp[201][20000];
    int findsubset(int fsum,vector<int> &nums,int n,int i)
    {
        //cout<<fsum<<" "<<i<<" "<<endl;
        if(fsum==0)
            return(1);
        if(i>=n||fsum<0)
            return(0);
       // cout<<i<<" "<<fsum<<endl;
        if(dp[i][fsum]!=-1)
            return(dp[i][fsum]);
        if(fsum-nums[i]>=0)
        {
            if(dp[i][fsum]=findsubset(fsum-nums[i],nums,n,i+1)||findsubset(fsum,nums,n,i+1))
                return(1);
        }
        else
        {
            return(findsubset(fsum,nums,n,i+1));
        }
        return(0);
    }
    bool canPartition(vector<int>& nums) {
        int n=nums.size();
        int nsum=0;
        memset(dp,-1,sizeof(dp));
        for(int i=0;i<n;i++)
        {
            nsum+=nums[i];
        }
        if(nsum%2!=0)
            return(false);
        return(findsubset(nsum/2,nums,n,0));
            
        
    }
};

