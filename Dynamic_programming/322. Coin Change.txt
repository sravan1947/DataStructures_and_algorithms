

class Solution {
public:
    int mincoins(vector<int> &coins,int amount,int i,int n)
    {
        vector<int> dp(amount+1,INT_MAX-1);
        dp[0]=0;
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<=amount;j++)
            {
             // cout<<i<<" "<<j<<endl;
                if(coins[i]<=j)
                {
                    dp[j]=min(dp[j],1+dp[j-coins[i]]);
                }
            }
        }
        return(dp[amount]);
    }
    int coinChange(vector<int>& coins, int amount) {
        sort(coins.begin(),coins.end(),greater<int>());
        int n=coins.size();
        int k=mincoins(coins,amount,0,n);
        if(k==INT_MAX-1)
            return(-1);
        return(k);
    }
};
_________________________________________________________________
class Solution {
public:
    int dp[20][50000];
    int mincoins(vector<int> &coins,int amount,int i,int n)
    {
        // cout<<i<<" "<<amount<<endl;
        if(amount==0)
        {
            return(0);
        }
        if(amount<0||i>=n)
            return(INT_MAX);
        if(dp[i][amount]!=-1)
            return(dp[i][amount]);
       int k=INT_MAX;
        k=min(k,mincoins(coins,amount-coins[i],i,n));
        if(k!=INT_MAX)
            k=k+1;
        return(dp[i][amount]=min(k,mincoins(coins,amount,i+1,n)));
    }
    int coinChange(vector<int>& coins, int amount) {
        //sort(coins.begin(),coins.end(),greater<int>());
        memset(dp,-1,sizeof(dp));
        int n=coins.size();
        int k=mincoins(coins,amount,0,n);
        if(k==INT_MAX)
            return(-1);
        return(k);
    }
};



_____________________________________________________________________________________

class Solution {
public:
    int dp[20][50000];
    int mincoins(vector<int> &coins,int amount,int i,int n)
    {
        for(int i=0;i<=n;i++)
        {
            for(int j=0;j<=amount;j++)
            {
                if(i==0)
                {
                    dp[i][j]=INT_MAX-1;
                }
                else
                    if(j==0)
                {
                    dp[i][j]=0;
                }
                else
                    if(coins[i-1]>j)
                {
                    dp[i][j]=dp[i-1][j];
                }
                else
                {
                    dp[i][j]=min(dp[i-1][j],1+dp[i][j-coins[i-1]]);
                }
               // cout<<i<<" "<<j<<" "<<dp[i][j]<<endl;
            }
        }
        return(dp[n][amount]);
    }
    int coinChange(vector<int>& coins, int amount) {
        sort(coins.begin(),coins.end(),greater<int>());
        memset(dp,0,sizeof(dp));
        int n=coins.size();
        int k=mincoins(coins,amount,0,n);
        if(k==INT_MAX-1)
            return(-1);
        return(k);
    }
};