64. Minimum Path Sum


Given a m x n grid filled with non-negative numbers, find a path from top left to bottom right,
 which minimizes the sum of all numbers along its path.

Note: You can only move either down or right at any point in time.


Input: grid = [[1,3,1],[1,5,1],[4,2,1]]
Output: 7
Explanation: Because the path 1 → 3 → 1 → 1 → 1 minimizes the sum.



class Solution {
public:
   
    int minPathSum(vector<vector<int>>& dp) {
        int n=dp.size();
        int m=dp[0].size();
     
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
                if(i==0&&j==0)
                    continue;
                if(i==0)
                {
                    dp[i][j]+=dp[i][j-1];
                }
                else
                    if(j==0)
                    {
                        dp[i][j]+=dp[i-1][j];
                    }
                else
                {
                    dp[i][j]+=min(dp[i-1][j],dp[i][j-1]);
                }
            }
        }
        return(dp[n-1][m-1]);
    }
};

____________________________________________________________________________________________
class Solution {
public:
    int dp[1000][1000];
    int minpaths(vector<vector<int>> &grid,int i,int j,int n,int m)
    {
        if(i==n-1&&j==m-1)
            return(grid[i][j]);
        if(i==n||j==m)
            return(100000);
        
        if(dp[i][j]!=-1)
            return(dp[i][j]);
        
        return(dp[i][j]=grid[i][j]+min(minpaths(grid,i+1,j,n,m),minpaths(grid,i,j+1,n,m)));
    }
    int minPathSum(vector<vector<int>>& grid) {
        int n=grid.size();
        int m=grid[0].size();
        memset(dp,-1,sizeof(dp));
        return(minpaths(grid,0,0,n,m));
    }
};
