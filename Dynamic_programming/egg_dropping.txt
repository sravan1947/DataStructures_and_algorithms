//{ Driver Code Starts
#include<bits/stdc++.h>
using namespace std;

// } Driver Code Ends
class Solution
{
    public:
    //Function to find minimum number of attempts needed in 
    //order to find the critical floor.
    int dp[400][400];
    int recur(int n,int k)
    {
          if(dp[n][k]!=-1)
            return(dp[n][k]);
     if(k==0||k==1||n==1)
            return(k);
       
        int mi=INT_MAX;
        
      
        int f,r;
        for( f=1;f<=k;f++)
        {
            r=max(recur(n-1,f-1),recur(n,k-f));
           if(r<mi)
            mi=r;
        }
        dp[n][k]=mi+1;
        return(mi+1);
    }
    int eggDrop(int n, int k) 
    {
        for(int i=0;i<=n;i++)
        {
            for(int j=0;j<=k;j++)
            {
                dp[i][j]=-1;
            }
        }
       return(recur(n,k));
        // your code here
    }
};

//{ Driver Code Starts.
int main()
{
    //taking total testcases
    int t;
    cin>>t;
    while(t--)
    {
        //taking eggs and floors count
        int n, k;
        cin>>n>>k;
        Solution ob;
        //calling function eggDrop()
        cout<<ob.eggDrop(n, k)<<endl;
    }
    return 0;
}

// } Driver Code Ends