494. Target Sum

Input: nums = [1,1,1,1,1], target = 3
Output: 5
Explanation: There are 5 ways to assign symbols to make the sum of nums be target 3.
-1 + 1 + 1 + 1 + 1 = 3
+1 - 1 + 1 + 1 + 1 = 3
+1 + 1 - 1 + 1 + 1 = 3
+1 + 1 + 1 - 1 + 1 = 3
+1 + 1 + 1 + 1 - 1 = 3

You are given an integer array nums and an integer target.

You want to build an expression out of nums by adding one of the symbols '+' and '-' before each integer in nums and
 then concatenate all the integers.

For example, if nums = [2, 1], you can add a '+' before 2 and a '-' before 1 and concatenate them to build the expression "+2-1".
Return the number of different expressions that you can build, which evaluates to target.

class Solution {
public:
    map<pair<int,int>,int> dp;
    int c=0;
    int recur(int su,int i,vector<int> &nums,int target,int n)
    {
       if(i==n&su==target)
       {
           return(1);
       }
        if(i==n)
            return(0);
        
       if(dp.count(make_pair(i,su)))
            {
                return(dp[{i,su}]);
            }
       else
       {
           int k=recur(su+nums[i],i+1,nums,target,n)+recur(su-nums[i],i+1,nums,target,n);
           return(dp[{i,su}]=k);
           
       }
        return(0);
    }
    int findTargetSumWays(vector<int>& nums, int target) {
        int n=nums.size();
        return(recur(0,0,nums,target,n));
    }
};