
Given an integer ‘N’, you are supposed to return the square of the given integer 
without using multiplication (*), division (/) or power function (pow()).

2
3
-4

Bitwise Operators
Our main approach here is to use bitwise operators. Let’s take a look at even and odd numbers individually.
Firstly if ‘N’ is even:
For a number to be even it needs to be a multiple of 2. So ‘N’ can be written as 2*C, where C is an integer.
Now N^2 will be (2*C)^2 = 4*C^2.
Secondly if ‘N’ is odd:
Since we know the odd number is nothing but an even number + 1. So ‘N’ can be expressed as 2*C + 1, where C is an integer.
Now N^2 will be (2*C + 1)^2  = 4*C^2 + 4*C + 1.
The steps are as follows:
Let’s define a function square(X), which returns the square of any integer X.
The base case is when N is 0 so we need to return 0.
Now when ‘N’ is even, return 4*square(N / 2) i.e (square(N >> 1) << 2) (using bitwise shift operator).
Else if the given number ‘N’ is odd return 4*square(floor(N / 2)) + 4*floor(N / 2) + 1 i.e. ((square(N >> 1) << 2) + ((N >> 1) << 2) + 1).
In the code implementation, we’ll use the right shift operator (>>) to calculate the floor(N / 2).
An edge case is when the integer is negative. We also know that the square of ‘N’ and ‘-N’ is the same, so whenever we are given a negative integer, we will convert it to a positive integer

int calculateSquare(int num)
{
    if(num<0)
        num=-num;
    if(num==0)
        return(0);
    if(((num)&(1)))
    {
        return((calculateSquare(num>>1)<<2)+1+((num>>1)<<2));
    }
    else
    {
        return(calculateSquare((num>>1))<<2);
    }
}