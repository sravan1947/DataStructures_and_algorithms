25. Reverse Nodes in k-Group


/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */

Input: head = [1,2,3,4,5], k = 2
Output: [2,1,4,3,5]



 Given the head of a linked list, reverse the nodes of the list k at a time, and return the modified list.

k is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of k then left-out nodes, in the end, should remain as it is.

You may not alter the values in the list's nodes, only nodes themselves may be changed.



class Solution {
public:
    void reverse(ListNode *p)
    {
        if(p==NULL||p->next==NULL)
        {
            return;
        }
        else
        {
            reverse(p->next);
            p->next->next=p;
            p->next=NULL;
        }
    }
    ListNode* reverseKGroup(ListNode* head, int n) {
        ListNode *p=head,*new_head=NULL,*prev=NULL,*head2=head,*f;
        int k=0;
        do
        {
            k++;
            prev=p;
            if(p!=NULL)
              p=p->next;
            if(k==n)
            {
                if(prev==NULL)
                {
                    break;
                }
                prev->next=NULL;
                reverse(head2);
                if(new_head==NULL)
                {
                    f=head2;
                    new_head=prev;
                    head2->next=p;
                    head2=p;
                }
                else
                {
                    if(f!=NULL)
                    {
                        f->next=prev;
                    }
                    f=head2;
                    
                    head2->next=p;
                    head2=p;   
                }
                k=0;
            }
             
        }while(prev!=NULL);
        return(new_head);
    }
};