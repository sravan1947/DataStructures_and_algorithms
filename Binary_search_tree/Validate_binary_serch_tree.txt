98. Validate Binary Search Tree


Given the root of a binary tree, determine if it is a valid binary search tree (BST).
A valid BST is defined as follows:

The left subtree of a node contains only nodes with keys less than the node's key.
The right subtree of a node contains only nodes with keys greater than the node's key.
Both the left and right subtrees must also be binary search trees.

class Solution {
public:
    TreeNode *ans=NULL;
    void check(TreeNode *root,TreeNode *p,TreeNode *q)
    {
        if(root!=NULL)
        {
            if(p->val<root->val&&q->val<root->val)
            {
                check(root->left,p,q);
            }
            
            else
                if(p->val>root->val&&q->val>root->val)
            {
                check(root->right,p,q);
            }
            else
            {
                ans=root;
            }
            
        }
        
    }
    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
        check(root,p,q);
        return(ans);
    }
};
____________________________________________

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<int> v;
    bool check(TreeNode *root,TreeNode *max,TreeNode *min)
    {
        if(root!=NULL)
        {
            if(min!=NULL&&root->val<=min->val)
                return (0);
            if(max!=NULL&&root->val>=max->val)
                return(0);
            return(check(root->left,root,min)&&check(root->right,max,root));
        }
        return(1);
    }
    bool isValidBST(TreeNode* root) {
        return(check(root,NULL,NULL));
   }
};



___________________________________________________________________________________________________________________________
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<int> v;
    void inorder(TreeNode *root)
    {
        if(root!=NULL)
        {
            inorder(root->left);
            v.push_back(root->val);
            inorder(root->right);
        }
    }
    bool isValidBST(TreeNode* root) {
        inorder(root);
        int n=v.size();
        for(int i=0;i<n-1;i++)
        {
            if(v[i]>=v[i+1])
                return(0);
        }
        return(1);
    }
};