
Given a binary search tree (BST), find the lowest common ancestor (LCA) of two given nodes in the BST.

According to the definition of LCA on Wikipedia:
 “The lowest common ancestor is defined between two nodes p and q as the lowest node in T that has both p and q as descendants
  (where we allow a node to be a descendant of itself).”
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */

class Solution {
public:
    TreeNode *ans=NULL;
    void check(TreeNode *root,TreeNode *p,TreeNode *q)
    {
        if(root!=NULL)
        {
            if(p->val<root->val&&q->val<root->val)
            {
                check(root->left,p,q);
            }
            
            else
                if(p->val>root->val&&q->val>root->val)
            {
                check(root->right,p,q);
            }
            else
            {
                ans=root;
            }
            
        }
        
    }
    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
        check(root,p,q);
        return(ans);
    }
};