The n-queens puzzle is the problem of placing n queens on an n x n chessboard such that no two queens attack each other.

Given an integer n, return all distinct solutions to the n-queens puzzle. You may return the answer in any order.

Each solution contains a distinct board configuration of the n-queens' placement, where 'Q' and '.' both indicate a queen and an empty space, respectively.

 
Input: n = 4
Output: [[".Q..","...Q","Q...","..Q."],["..Q.","Q...","...Q",".Q.."]]
Explanation: There exist two distinct solutions to the 4-queens puzzle as shown above

class Solution {
public:
     vector<vector<string>> ans;
    int isvalid(int row,int col,vector<string> &q,int n)
    {
            for(int i=row;i>=0;i--)
            {
                if(q[i][col]=='Q')
                {
                    return 0;
                }
            }
         for(int i=row,j=col;i>=0&&j>=0;i--,j--)
         {
             if(q[i][j]=='Q')
                 return 0;
         }
        for(int i=row,j=col;i>=0&&j<n;i--,j++)
        {
            if(q[i][j]=='Q')
                return(0);
        }
        return(1);
    }
    void backtrack(vector<string> &q,int row,int n)
    {
        if(row==n)
        {
            ans.push_back(q);
            return;
        }
        else
        {
            for(int col=0;col<n;col++)
            {
                if(isvalid(row,col,q,n))
                {
                    q[row][col]='Q';
                    backtrack(q,row+1,n);
                    q[row][col]='.';
                }
            }
        }
        
    }
    vector<vector<string>> solveNQueens(int n) {
       vector<string> q(n,string(n,'.'));
        backtrack(q,0,n);
        return(ans);
        
    }
};