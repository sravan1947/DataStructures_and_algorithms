#include<bits/stdc++.h>
using namespace std;

// } Driver Code Ends
//User function Template for C++


//negative ede
class Solution{
	public:
	/*  Function to implement Dijkstra
    *   adj: vector of vectors which represents the graph
    *   S: source vertex to start traversing graph with
    *   V: number of vertices
    */
    vector <int> bellman_ford(int v, vector<vector<int>> adj, int S) {
        // Code here
        vector<int> dis(v);
        for(int i=0;i<v;i++)
        {
            dis[i]=100000000;
        }
        dis[S]=0;
        for(int i=0;i<v-1;i++)
        {
            for(auto j : adj)
            {
                int u=j[0];
                int v=j[1];
                if(dis[v]>dis[u]+j[2])   // do  one more relaxation it i will find there is a negative edge cycle or not
                {                       // negative edge cycle will never have the shortest path eg   -1       howmany time you find every time the distance will be minimum
                                                                                                    1 ----> 2
                     dis[v]=dis[u]+j[2];                                                              <------
                                                                                                       -1
                }
            }
        }
        return(dis);
    }
};


//{ Driver Code Starts.


int main()
{
    int t;
    cin >> t;
    while (t--) {
        int V, E;
        cin >> V >> E;
        vector<vector<int>> adj;
        int i=0;
        while (i++<E) {
            int u, v, w;
            cin >> u >> v >> w;
            vector<int> t1;
            t1.push_back(u);
            t1.push_back(v);
            t1.push_back(w);
            adj.push_back(t1);
        }
        int S;
        cin>>S;
        
        Solution obj;
    	vector<int> res = obj.bellman_ford(V, adj, S);
    	
    	for(int i=0; i<V; i++)
    	    cout<<res[i]<<" ";
    	cout<<endl;
    }

    return 0;
}


// } Driver Code Ends