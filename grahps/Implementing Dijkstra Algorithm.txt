//{ Driver Code Starts
#include<bits/stdc++.h>
using namespace std;


// not valid for Negative edges 


//{ Driver Code Starts
#include<bits/stdc++.h>
using namespace std;

class Solution
{
	public:

    vector <int> dijkstra(int v, vector<vector<int>> adj[], int S)
    {
        // Code here
        vector<int> dis(v),vis(v);
        set<pair<int,int>> s;
        for(int i=0;i<v;i++)
        {
            vis[i]=0;
            dis[i]=INT_MAX;
        }
        dis[S]=0;
        s.insert({dis[S],S});   //using set to compute in o(logn);
        while(s.size())
        {
            pair<int, int> tmp = *(s.begin());
            int u=tmp.second;
            s.erase(s.begin());
            vis[u]=1;
            for(auto j: adj[u])
            {
                if(vis[j[0]]==0&&dis[j[0]]>dis[u]+j[1])
                {
                    if(dis[j[0]]!=INT_MAX)
                    {
                        s.erase(s.find(make_pair(dis[j[0]],j[0])));
                        s.insert({dis[u]+j[1],j[0]});
                    }
                    else
                    {
                        s.insert({dis[u]+j[1],j[0]});
                    }

                    dis[j[0]]= dis[u]+j[1];
                }
            }
            
        }
        return(dis);
    }
};

//{ Driver Code Starts.


int main()
{
    int t;
    cin >> t;
    while (t--) {
        int V, E;
        cin >> V >> E;
        vector<vector<int>> adj[V];
        int i=0;
        while (i++<E) {
            int u, v, w;
            cin >> u >> v >> w;
            vector<int> t1,t2;
            t1.push_back(v);
            t1.push_back(w);
            adj[u].push_back(t1);
            t2.push_back(u);
            t2.push_back(w);
            adj[v].push_back(t2);
        }
        int S;
        cin>>S;
        
        Solution obj;
    	vector<int> res = obj.dijkstra(V, adj, S);
    	
    	for(int i=0; i<V; i++)
    	    cout<<res[i]<<" ";
    	cout<<endl;
    }

    return 0;
}




_______________________________________________________________________________________________



class Solution
{
	public:
	//Function to find the shortest distance of all the vertices
    //from the source vertex S.
    int min_nonvisited(vector<int> &vis,vector<int> &dis,int v)
    {
        int mi=INT_MAX,u=-1;
        for(int i=0;i<v;i++)
        {
            if(vis[i]==0&&dis[i]<mi)
            {
                mi=dis[i];
                u=i;
            }
        }
        return(u);
    }
    vector <int> dijkstra(int v, vector<vector<int>> adj[], int S)
    {
        // Code here
        vector<int> dis(v),vis(v);
        for(int i=0;i<v;i++)
        {
            vis[i]=0;
            dis[i]=INT_MAX;
        }
        dis[S]=0;
        for(int i=0;i<v;i++)
        {
            int u= min_nonvisited(vis,dis,v);
            
            if(u!=-1)
            {
                vis[u]=1;
                for(auto j: adj[u])
                {
                    if(vis[j[0]]==0&&dis[j[0]]>dis[u]+j[1])
                    {
                        
                       dis[j[0]]= dis[u]+j[1];
                    }
                }
            }
            
        }
        return(dis);
    }
};


//{ Driver Code Starts.


int main()
{
    int t;
    cin >> t;
    while (t--) {
        int V, E;
        cin >> V >> E;
        vector<vector<int>> adj[V];
        int i=0;
        while (i++<E) {
            int u, v, w;
            cin >> u >> v >> w;
            vector<int> t1,t2;
            t1.push_back(v);
            t1.push_back(w);
            adj[u].push_back(t1);
            t2.push_back(u);
            t2.push_back(w);
            adj[v].push_back(t2);
        }
        int S;
        cin>>S;
        
        Solution obj;
    	vector<int> res = obj.dijkstra(V, adj, S);
    	
    	for(int i=0; i<V; i++)
    	    cout<<res[i]<<" ";
    	cout<<endl;
    }

    return 0;
}


// } Driver Code Ends