785. Is Graph Bipartite?


There is an undirected graph with n nodes, where each node is numbered between 0 and n - 1. 
You are given a 2D array graph, where graph[u] is an array of nodes that node u is adjacent to. More formally, for each v in graph[u],
 there is an undirected edge between node u and node v. The graph has the following properties:

There are no self-edges (graph[u] does not contain u).
There are no parallel edges (graph[u] does not contain duplicate values).
If v is in graph[u], then u is in graph[v] (the graph is undirected).
The graph may not be connected, meaning there may be two nodes u and v such that there is no path between them.
A graph is bipartite if the nodes can be partitioned into two independent sets A and B such that every edge in the graph connects a 
node in set A and a node in set B.

Return true if and only if it is bipartite.


Input: graph = [[1,2,3],[0,2],[0,1,3],[0,2]]
Output: false
Explanation: There is no way to partition the nodes into two independent sets such that every edge connects a node in one
 and a node in the other.

class Solution {
public:
    bool isBipartite(vector<vector<int>>& graph) {
        int n=graph.size();
        int colour[n];
        memset(colour,-1,sizeof(colour));
        int vis[n];
         queue<int> q;
         memset(vis,0,sizeof(vis));
        for(int i=0;i<n;i++)
        {
            if(vis[i]==0)
            {
                q.push(i);
                vis[i]=1;
                while(!q.empty())
                {
                    int k=q.front();
                    for(auto j: graph[k])
                    {
                        if(vis[j]==0)
                        {
                           q.push(j);
                            vis[j]=1;
                            if(colour[k]==0)
                            {
                                colour[j]=1;
                            }
                            else
                            {
                                colour[j]=0;
                            }
                        }
                        else
                            if(vis[j]==1&&colour[j]==colour[k]) //if graph is coloured with more than 3 colours then it is not a bipatrite                                                                          graph.
                            {
                                return(0);
                            }
                    }
                    q.pop();
                }
           }
        }
        return(1);
        
    }
};


_____________________________________________________________________________________________________________
class Solution {
public:
    bool isBipartite(vector<vector<int>>& graph) {
        int n=graph.size();
        int colour[n];
        memset(colour,-1,sizeof(colour));
        int vis[n];
         memset(vis,0,sizeof(vis));
      
        for(int i=0;i<n;i++)
        {
            if(vis[i]==0)
            {
                  queue<int> q;
                    q.push(i);
                    vis[i]=1;
                    colour[i]=0;
                    vector<int> v1,v2;
                     v1.push_back(i);
                
                while(!q.empty())
                {
                    int k=q.front();
                    for(auto j: graph[k])
                    {
                        if(vis[j]==0)
                        {
                           q.push(j);
                            vis[j]=1;
                            if(colour[k]==0)
                            {
                                colour[j]=1;
                                v2.push_back(j);
                            }
                            else
                            {
                                colour[j]=0;
                                v1.push_back(j);
                            }
                        }
                    }
                    //cout<<k<<endl;
                q.pop();
            }
            int n1=v1.size();
            int n2=v2.size();
            set<pair<int,int>> un_se;
            for(int i=0;i<n;i++)
            {
                for(auto j: graph[i])
                {
                    un_se.insert({i,j});
                }
            }
        
            for(int i=0;i<n1;i++)
            {
                for(int j=i+1;j<n1;j++)
                    if(un_se.count({v1[i],v1[j]}))
                        return(0);
            }
            for(int i=0;i<n2;i++)
            {
                for(int j=i+1;j<n2;j++)
                    if(un_se.count({v2[i],v2[j]}))
                        return(0);
            }
         }
        }
  
      
        return(1);
        
    }
};