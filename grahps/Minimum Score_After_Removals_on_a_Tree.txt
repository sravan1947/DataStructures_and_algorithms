class Solution {
public:
    // Time Complexity:- O((V+E)^2)
    // Space Complexity:- O(V)
    void FindSubtreeXor(int v, int p, vector <int> adj[], vector <int>& subtreeXor){
        for(auto& u : adj[v]){
            if(u != p){
                FindSubtreeXor(u, v, adj, subtreeXor);
                subtreeXor[v] ^= subtreeXor[u];
            }
        }
    }
    
    int Calculate(int v, int p, vector <int> adj[], vector <int>& nums, int totalXor, int firstXor, int& ans){
        int subtreeXor = nums[v];
        for(auto& u : adj[v]){
            if(u != p){
                int childXor = Calculate(u, v, adj, nums, totalXor, firstXor, ans);
 
                subtreeXor ^= childXor;
 
                int secondXor = childXor, thirdXor = totalXor ^ secondXor;
                ans = min(ans, max({firstXor, secondXor, thirdXor}) - min({firstXor, secondXor, thirdXor}));                
            }
        }
        return subtreeXor;
    }
 
    int minimumScore(vector<int>& nums, vector<vector<int>>& edges) {
        int n = nums.size(), ans = INT_MAX;
 
        queue <int> q;
        vector <int> adj[n], vis(n), subtreeXor(nums.begin(), nums.end());
 
        for(auto& edge : edges){
            adj[edge[0]].push_back(edge[1]);
            adj[edge[1]].push_back(edge[0]);
        }
 
        FindSubtreeXor(0, -1, adj, subtreeXor);
 
        q.push(0);
        vis[0] = 1;
 
        while(!q.empty()){
            int v = q.front();
            q.pop();
 
            for(auto& u : adj[v]){
                if(!vis[u]){
                    q.push(u);
                    vis[u] = 1;
 
                    // keep subtree rooted at u as it is
                    int rem = subtreeXor[0] ^ subtreeXor[u];
                    int xo = Calculate(v, u, adj, nums, rem, subtreeXor[u], ans);
                }
            }
        }
 
        return ans;   
    }
};