//{ Driver Code Starts
// Initial Template for C++

#include <bits/stdc++.h>
using namespace std;

// } Driver Code Ends
// User function Template for C++

class Solution{
    public:
    string findOrder(string d[], int n, int k) {
        //code here
        map<char,vector<int>> v;
        unordered_map<char,int> ind;
        for(int i=0;i<n;i++)
        {
            int m=d[i].length();
            for(int j=0;j<m;j++)
            {
                if(ind.count(d[i][j])==0)
                {
                    ind[d[i][j]]=0;
                }
            }
        }
        for(int i=0;i<n-1;i++)
        {
            int n=d[i].length();
            int m=d[i+1].length();
            for(int j=0;j<min(n,m);j++)
            {
                if(d[i][j]!=d[i+1][j])  
                {
                    v[d[i][j]].push_back(d[i+1][j]);
                    if(ind.count(d[i+1][j])==0)
                    {
                        ind[d[i+1][j]]=1;
                    }
                    else
                    {
                        ind[d[i+1][j]]++;
                    }
                    break;
                }
            }
        }
        queue<char> q;
        for(auto i:ind)
        {
          //  cout<<i.first<<" "<<i.second<<endl;
            if(i.second==0)
            {
                q.push(i.first);
            }
        }
        set<char> s;
        string a="";
        while(!q.empty())
        {
            if(!s.count(q.front()))
                a+=q.front();
            s.insert(q.front());
            for(auto i:v[q.front()])
            {
                ind[i]--;
                if(ind[i]==0)
                {
                    q.push(i);
                }
            }
            q.pop();
        }
     
        return(a);
    }
};

//{ Driver Code Starts.
string order;
bool f(string a, string b) {
    int p1 = 0;
    int p2 = 0;
    for (int i = 0; i < min(a.size(), b.size()) and p1 == p2; i++) {
        p1 = order.find(a[i]);
        p2 = order.find(b[i]);
        //	cout<<p1<<" "<<p2<<endl;
    }

    if (p1 == p2 and a.size() != b.size()) return a.size() < b.size();

    return p1 < p2;
}

// Driver program to test above functions
int main() {
    int t;
    cin >> t;
    while (t--) {
        int N, K;
        cin >> N >> K;
        string dict[N];
        for (int i = 0; i < N; i++) cin >> dict[i];
        
        Solution obj;
        string ans = obj.findOrder(dict, N, K);
        order = "";
        for (int i = 0; i < ans.size(); i++) order += ans[i];

        string temp[N];
        std::copy(dict, dict + N, temp);
        sort(temp, temp + N, f);

        bool f = true;
        for (int i = 0; i < N; i++)
            if (dict[i] != temp[i]) f = false;

        if(f)cout << 1;
        else cout << 0;
        cout << endl;
    }
    return 0;
}

// } Driver Code Ends