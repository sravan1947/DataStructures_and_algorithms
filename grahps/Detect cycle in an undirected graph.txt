//{ Driver Code Starts
#include <bits/stdc++.h>
using namespace std;

// } Driver Code Ends
class Solution {
  public:
    // Function to detect cycle in an undirected graph.
    int dfs(int i,int p,vector<int> v[],int vis[])
    {
        //cout<<i<<endl;
        if(vis[i]==1)
            return(1);
        vis[i]=1;
        for(auto j:v[i])
        {
            if(j!=p)
            {
              if(dfs(j,i,v,vis))
                return(1);
            }
        }
        return(0);
    }
    bool isCycle(int n, vector<int> adj[]) {
        // Code here
    vector<int> v[n];
    for(int i=0;i<n;i++)
    {
        for(auto j:adj[i])
        {
            v[i].push_back(j);
        }
    }
    int vis[n]={0};
    for(int i=0;i<n;i++)
    {
      //  cout<<vis[i]<<endl;
      if(vis[i]==0)
        {
            int k=dfs(i,i,v,vis);
            if(k==1)
            return(1);
        
        }
    }
    
    return(0);
    }
};

//{ Driver Code Starts.
int main() {
    int tc;
    cin >> tc;
    while (tc--) {
        int V, E;
        cin >> V >> E;
        vector<int> adj[V];
        for (int i = 0; i < E; i++) {
            int u, v;
            cin >> u >> v;
            adj[u].push_back(v);
            adj[v].push_back(u);
        }
        Solution obj;
        bool ans = obj.isCycle(V, adj);
        if (ans)
            cout << "1\n";
        else
            cout << "0\n";
    }
    return 0;
}
// } Driver Code Ends