Given a reference of a node in a connected undirected graph.

Return a deep copy (clone) of the graph.

Each node in the graph contains a value (int) and a list (List[Node]) of its neighbors.

class Node {
    public int val;
    public List<Node> neighbors;
}
 

Test case format:

For simplicity, each node's value is the same as the node's index (1-indexed). For example, the first node with val == 1, the second node with val == 2, and so on. The graph is represented in the test case using an adjacency list.

An adjacency list is a collection of unordered lists used to represent a finite graph. Each list describes the set of neighbors of a node in the graph.

The given node will always be the first node with val = 1. You must return the copy of the given node as a reference to the cloned graph.



Input: adjList = [[2,4],[1,3],[2,4],[1,3]]
Output: [[2,4],[1,3],[2,4],[1,3]]
Explanation: There are 4 nodes in the graph.
1st node (val = 1)'s neighbors are 2nd node (val = 2) and 4th node (val = 4).
2nd node (val = 2)'s neighbors are 1st node (val = 1) and 3rd node (val = 3).
3rd node (val = 3)'s neighbors are 2nd node (val = 2) and 4th node (val = 4).
4th node (val = 4)'s neighbors are 1st node (val = 1) and 3rd node (val = 3).



/*
// Definition for a Node.
class Node {
public:
    int val;
    vector<Node*> neighbors;
    Node() {
        val = 0;
        neighbors = vector<Node*>();
    }
    Node(int _val) {
        val = _val;
        neighbors = vector<Node*>();
    }
    Node(int _val, vector<Node*> _neighbors) {
        val = _val;
        neighbors = _neighbors;
    }
};
*/

class Solution {
public:
    map<Node *, Node *> mp;
    void dfs(Node *curr)
    {
        if(curr!=NULL)
        {
            Node* copy =new Node(curr->val);
            mp[curr]=copy;
            for(auto i: curr->neighbors)
            {
                if(mp.count(i))
                {
                    copy->neighbors.push_back(mp[i]);
                }
                else
                {
                    dfs(i);
                     copy->neighbors.push_back(mp[i]);
                }
            }
        }
    }
    Node* cloneGraph(Node* node) {
         dfs(node);
          return(mp[node]);
    }
};


/*
// Definition for a Node.
class Node {
public:
    int val;
    vector<Node*> neighbors;
    Node() {
        val = 0;
        neighbors = vector<Node*>();
    }
    Node(int _val) {
        val = _val;
        neighbors = vector<Node*>();
    }
    Node(int _val, vector<Node*> _neighbors) {
        val = _val;
        neighbors = _neighbors;
    }
};
*/

class Solution {
public:
    map<Node *, Node *> mp;
    Node* dfs(Node *curr)
    {
        vector<Node*> neigbours;
        if(curr!=NULL)
        {
            Node* copy =new Node(curr->val);
            mp[curr]=copy;
            for(auto i: curr->neighbors)
            {
                if(mp.count(i))
                {
                    neigbours.push_back(mp[i]);
                }
                else
                {
                    neigbours.push_back(dfs(i));
                }
            }
            copy->neighbors=neigbours;
            return(copy);
        }
        return(NULL);
    }
    Node* cloneGraph(Node* node) {
         return(dfs(node));
    }
};