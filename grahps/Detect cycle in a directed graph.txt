//{ Driver Code Starts
#include <bits/stdc++.h>
using namespace std;

// } Driver Code Ends
class Solution {
  public:
    // Function to detect cycle in a directed graph.
    int cyclic(int i,vector<int> adj[],int vis[],int recs[])
    {
        vis[i]=1;
        recs[i]=1;
        for(auto j: adj[i])
        {
            if(vis[j]==0&&cyclic(j,adj,vis,recs))
            {
                return(1);
            }
            else
            if(recs[j]==1)
                return(1);
        }
        recs[i]=0;
        return(0);
    }
    bool isCyclic(int v, vector<int> adj[]) {
        // code here
        int vis[v];
        int recs[v];
        memset(vis,0,sizeof(vis));
        memset(recs,0,sizeof(vis));
        for(auto i=0;i<v;i++)
        {
            if(vis[i]==0)
            {
                if(cyclic(i,adj,vis,recs))
                {
                    return(1);
                }
            }
        }
        return(0);
        
    }
};

//{ Driver Code Starts.

int main() {

    int t;
    cin >> t;
    while (t--) {
        int V, E;
        cin >> V >> E;

        vector<int> adj[V];

        for (int i = 0; i < E; i++) {
            int u, v;
            cin >> u >> v;
            adj[u].push_back(v);
        }

        Solution obj;
        cout << obj.isCyclic(V, adj) << "\n";
    }

    return 0;
}

// } Driver Code Ends