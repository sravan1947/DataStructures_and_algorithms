// { Driver Code Starts
#include<bits/stdc++.h>
using namespace std;

 // } Driver Code Ends

Create an empty stack ‘S’ and do DFS traversal of a graph. In DFS traversal,
 after calling recursive DFS for adjacent vertices of a vertex, push the vertex to stack. In the above graph, if we start DFS 
 from vertex 0, we get vertices in stack as 1, 2, 4, 3, 0. 
Reverse directions of all arcs to obtain the transpose graph. 
One by one pop a vertex from S while S is not empty. Let the popped vertex be ‘v’.
 Take v as source and do DFS (call DFSUtil(v)). The DFS starting from v prints strongly connected component of v. In the above example, 
 we process vertices in order 0, 3, 4, 2, 1 (One by one popped from stack). 

class Solution
{
	public:
	//Function to find number of strongly connected components in the graph.
	
	
	void toposort(int vis[],int v,int k,vector<int> adj[],stack<int> &st)   // Step 1:
	{
	    for(auto i: adj[k])
	    {
	        if(vis[i]==0)
	        {
	            vis[i]=1;
	            toposort(vis,v,i,adj,st);
	        }
	    }
	    st.push(k);
	}
	void dfs(vector<int> adj[],int k,int vis[])   //Step 3:
	{
	    for(auto i: adj[k])
	    {
	        if(vis[i]==0)
	        {
	            vis[i]=1;
	            dfs(adj,i,vis);
	        }
	    }
	}
    int kosaraju(int v, vector<int> adj[]) 
    {
        //code here
        int vis[v]={0};
        stack<int> st;
        for(int i=0;i<v;i++)
        {
            if(vis[i]==0)
            {
                vis[i]=1;
                toposort(vis,v,i,adj,st);
            }
        }
        vector<int> temp[v];
        for(int i=0;i<v;i++)
        {
            for(auto j: adj[i])
            {
                temp[j].push_back(i);    //step 2 
            }
        }
        memset(vis,0,sizeof(vis));
        int c=0;
        while(!st.empty())
        {
            int k=st.top();
            if(vis[k]==0)
            {
                vis[k]=1;
                c++;
                dfs(temp,k,vis);
            }
            st.pop();
        }
        return(c);
    }
};

// { Driver Code Starts.


int main()
{
    
    int t;
    cin >> t;
    while(t--)
    {
    	int V, E;
    	cin >> V >> E;

    	vector<int> adj[V];

    	for(int i = 0; i < E; i++)
    	{
    		int u, v;
    		cin >> u >> v;
    		adj[u].push_back(v);
    	}

    	Solution obj;
    	cout << obj.kosaraju(V, adj) << "\n";
    }

    return 0;
}

  // } Driver Code Ends