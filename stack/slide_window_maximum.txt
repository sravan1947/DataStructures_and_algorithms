
You are given an array of integers nums, there is a sliding window of size k 
which is moving from the very left of the array to the very right. You can only see the k numbers in the window.
Each time the sliding window moves right by one position.

Return the max sliding window.

Input: nums = [1,3,-1,-3,5,3,6,7], k = 3
Output: [3,3,5,5,6,7]
Explanation: 
Window position                Max
---------------               -----
[1  3  -1] -3  5  3  6  7       3
 1 [3  -1  -3] 5  3  6  7       3
 1  3 [-1  -3  5] 3  6  7       5
 1  3  -1 [-3  5  3] 6  7       5
 1  3  -1  -3 [5  3  6] 7       6
 1  3  -1  -3  5 [3  6  7]      7
 

//keeping front element as a large element

class Solution {
public:
    vector<int> maxSlidingWindow(vector<int>& nums, int k) {
        int n=nums.size();
        deque<int> deq; 
        vector<int> ans;
        int i=0;
        for(;i<k;i++)
        {
            while(!deq.empty()&&nums[deq.back()]<nums[i])
            {
                deq.pop_back();
            }
            deq.push_back(i); 
        }
        
        for(;i<n;i++)
        {
            ans.push_back(nums[deq.front()]);
            while(!deq.empty()&&deq.front()<=i-k)
            {
                deq.pop_front();
            }
            while(!deq.empty()&&nums[deq.back()]<nums[i])
            {
                deq.pop_back();   
            }
            deq.push_back(i);
        }
        ans.push_back(nums[deq.front()]);
        return(ans);
        
    }
};